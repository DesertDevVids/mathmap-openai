/*
 * new_template.c
 *
 * MathMap
 *
 * Copyright (C) 2002-2008 Mark Probst
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/*
 * $$g -> GIMP ? 1 : 0
 * $$m -> mathmap code
 * $$p -> USER_CURVE_POINTS
 * $$q -> USER_GRADIENT_POINTS
 * $$xy_decls         -> declarations for xy-constant variables
 * $$xy_code          -> code for xy-constant variables
 * $$x_decls          -> declarations for x-constant variables
 * $$x_code           -> code for x-constant variables
 * $$y_decls          -> declarations for y-constant variables
 * $$y_code           -> code for y-constant variables
 * $$opmacros_h       -> full name of opmacros.h file
 * $$max_debug_tuples -> MAX_DEBUG_TUPLES
 */

#include <stdlib.h>
#include <math.h>
#include <complex.h>

#if !$g
#define OPENSTEP
#endif

#define IN_COMPILED_CODE

#include "$include/opmacros.h"
#include "$include/pools.h"

#ifndef MIN
#define MIN(a,b)         (((a)<(b))?(a):(b))
#endif
#ifndef MAX
#define MAX(a,b)         (((a)<(b))?(b):(a))
#endif

#define M_PI		3.14159265358979323846	/* pi */

$def_edge_behaviour

$def_userval_image

#define USER_CURVE_POINTS             $p
#define USER_GRADIENT_POINTS          $q

#define MAX_DEBUG_TUPLES              $max_debug_tuples

$def_tuple

typedef unsigned int color_t;

#define MAKE_RGBA_COLOR(r,g,b,a)            ((((color_t)(r))<<24)|(((color_t)(g))<<16)|(((color_t)(b))<<8)|((color_t)(a)))
#define RED(c)                              ((c)>>24)
#define GREEN(c)                            (((c)>>16)&0xff)
#define BLUE(c)                             (((c)>>8)&0xff)
#define ALPHA(c)                            ((c)&0xff)

$def_image_types

struct _mathmap_invocation_t;
struct _userval_t;
struct _image_t;

$def_filter_funcs

typedef struct
{
    double r, g, b, a;
} GimpRGB;

typedef struct _GtkWidget GtkWidget;

$def_userval

struct _input_drawable_t;

$def_image

typedef struct _filter_t filter_t;
typedef struct _interpreter_insn_t interpreter_insn_t;
typedef struct _GArray GArray;
typedef void* initfunc_t;

$def_mathmap

typedef struct
{
    $xy_decls
} xy_const_vars_t;

typedef struct
{
    $y_decls
} y_const_vars_t;

struct _mathmap_frame_t;
struct _mathmap_slice_t;

$def_mathfuncs

$def_invocation_frame_slice

$def_builtins

$def_make_resize_image

$def_noise

struct _gsl_vector;
typedef struct _gsl_vector gsl_vector;
struct _gsl_matrix;
typedef struct _gsl_matrix gsl_matrix;

gsl_matrix * gsl_matrix_alloc (const size_t n1, const size_t n2);
void gsl_matrix_free (gsl_matrix * m);
void gsl_matrix_set(gsl_matrix * m, const size_t i, const size_t j, const double x);

gsl_vector *gsl_vector_alloc (const size_t n);
void gsl_vector_free (gsl_vector * v);
double gsl_vector_get (const gsl_vector * v, const size_t i);
void gsl_vector_set (gsl_vector * v, const size_t i, double x);

int gsl_linalg_HH_solve (gsl_matrix * A, const gsl_vector * b, gsl_vector * x);

#define GSL_PREC_SINGLE		1

double gsl_sf_ellint_Kcomp (double k, unsigned int mode);
double gsl_sf_ellint_Ecomp (double k, unsigned int mode);

double gsl_sf_ellint_F (double phi, double k, unsigned int mode);
double gsl_sf_ellint_E (double phi, double k, unsigned int mode);
double gsl_sf_ellint_P (double phi, double k, double n, unsigned int mode);
double gsl_sf_ellint_D (double phi, double k, double n, unsigned int mode);

double gsl_sf_ellint_RC (double x, double y, unsigned int mode);
double gsl_sf_ellint_RD (double x, double y, double z, unsigned int mode);
double gsl_sf_ellint_RF (double x, double y, double z, unsigned int mode);
double gsl_sf_ellint_RJ (double x, double y, double z, double p, unsigned int mode);

int gsl_sf_elljac_e (double u, double m, double *sn, double *cn, double *dn);

complex float cgamma (complex float z);

double gsl_sf_beta (double a, double b);

extern void save_debug_tuples (mathmap_invocation_t *invocation, int row, int col);

#define DECLARE_NATIVE_FILTER(name)	extern image_t* name (mathmap_invocation_t*, userval_t*, pools_t*)
$native_filter_decls

$filter_begin
static float*
filter_$name (mathmap_invocation_t *invocation, userval_t *arguments, float x, float y, float t, pools_t *pools);
$filter_end

static void
calc_lines (mathmap_slice_t *slice, int first_row, int last_row, unsigned char *q)
{
    mathmap_frame_t *mmframe = slice->frame;
    mathmap_invocation_t *invocation = mmframe->invocation;
    color_t (*get_orig_val_pixel_func) (mathmap_invocation_t*, float, float, image_t*, int);
    int row, col;
    float t = mmframe->current_t;
    float R = invocation->image_R;
    int __canvasPixelW = invocation->img_width;
    int __canvasPixelH = invocation->img_height;
    int __renderPixelW = invocation->render_width;
    int __renderPixelH = invocation->render_height;
    float sampling_offset_x = slice->sampling_offset_x, sampling_offset_y = slice->sampling_offset_y;
    int origin_x = slice->region_x, origin_y = slice->region_y;
    int frame = mmframe->current_frame;
    int output_bpp = invocation->output_bpp;
    int is_bw = output_bpp == 1 || output_bpp == 2;
    int need_alpha = output_bpp == 2 || output_bpp == 4;
    int alpha_index = output_bpp - 1;
    xy_const_vars_t *xy_vars = mmframe->xy_vars;
    pools_t pixel_pools;
    pools_t *pools;
    int region_x = slice->region_x;
    int final_render_width = invocation->final_render_width;
    int final_render_height = invocation->final_render_height;

    init_pools(&pixel_pools);

    first_row = MAX(0, first_row);
    last_row = MIN(last_row, slice->region_y + slice->region_height);

    if (invocation->antialiasing)
	get_orig_val_pixel_func = get_orig_val_intersample_pixel;
    else
	get_orig_val_pixel_func = get_orig_val_pixel;

    for (row = first_row - slice->region_y; row < last_row - slice->region_y; ++row)
    {
	float y = CALC_VIRTUAL_Y(row + slice->region_y, final_render_height, sampling_offset_y);
	unsigned char *p = q;

	pools = &slice->pools;

	$x_decls

	$x_code

	pools = &pixel_pools;

	for (col = 0; col < slice->region_width; ++col)
	{
	    y_const_vars_t *y_vars = &slice->y_vars[col];
	    float x = CALC_VIRTUAL_X(col + region_x, final_render_width, sampling_offset_x);
	    float *return_tuple;

	    if (invocation->do_debug)
		invocation->num_debug_tuples = 0;

	    reset_pools(pools);

	    {
		$m
	    }

	    if (is_bw)
		p[0] = (TUPLE_RED(return_tuple) * 0.299
			+ TUPLE_GREEN(return_tuple) * 0.587
			+ TUPLE_BLUE(return_tuple) * 0.114) * 255.0;
	    else
	    {
		p[0] = TUPLE_RED(return_tuple) * 255.0;
		p[1] = TUPLE_GREEN(return_tuple) * 255.0;
		p[2] = TUPLE_BLUE(return_tuple) * 255.0;
	    }
	    if (need_alpha)
		p[alpha_index] = TUPLE_ALPHA(return_tuple) * 255.0;

	    if (invocation->do_debug)
		save_debug_tuples(invocation, row, col);

	    p += output_bpp;
	}

	q += invocation->row_stride;

	if (!invocation->supersampling)
	    invocation->rows_finished[row] = 1;
    }

    free_pools(&pixel_pools);
}

static void
init_frame (mathmap_frame_t *mmframe)
{
    mathmap_invocation_t *invocation = mmframe->invocation;
    xy_const_vars_t *xy_vars;
    color_t (*get_orig_val_pixel_func) (mathmap_invocation_t*, float, float, image_t*, int);
    float t = mmframe->current_t;
    int __canvasPixelW = invocation->img_width;
    int __canvasPixelH = invocation->img_height;
    int __renderPixelW = invocation->render_width;
    int __renderPixelH = invocation->render_height;
    float R = invocation->image_R;
    pools_t *pools = &mmframe->pools;

    if (invocation->antialiasing)
	get_orig_val_pixel_func = get_orig_val_intersample_pixel;
    else
	get_orig_val_pixel_func = get_orig_val_pixel;

    mmframe->xy_vars = xy_vars = (xy_const_vars_t*)pools_alloc(pools, sizeof(xy_const_vars_t));

    {
	$xy_code
    }
}

static void
init_slice (mathmap_slice_t *slice)
{
    mathmap_frame_t *mmframe = slice->frame;
    mathmap_invocation_t *invocation = mmframe->invocation;
    color_t (*get_orig_val_pixel_func) (mathmap_invocation_t*, float, float, image_t*, int);
    float t = mmframe->current_t;
    int __canvasPixelW = invocation->img_width;
    int __canvasPixelH = invocation->img_height;
    int __renderPixelW = invocation->render_width;
    int __renderPixelH = invocation->render_height;
    float R = invocation->image_R;
    pools_t *pools = &slice->pools;

    if (invocation->antialiasing)
	get_orig_val_pixel_func = get_orig_val_intersample_pixel;
    else
	get_orig_val_pixel_func = get_orig_val_pixel;

    slice->y_vars = (y_const_vars_t*)pools_alloc(pools, sizeof(y_const_vars_t) * slice->region_width);

    {
	xy_const_vars_t *xy_vars = mmframe->xy_vars;
	int col;

	for (col = 0; col < slice->region_width; ++col)
	{
	    y_const_vars_t *y_vars = &slice->y_vars[col];
	    float x = CALC_VIRTUAL_X(col + slice->region_x, invocation->final_render_width, slice->sampling_offset_x);

	    {
		$y_code
	    }
	}
    }
}

mathfuncs_t
mathmapinit (mathmap_invocation_t *invocation)
{
    mathfuncs_t funcs;

    funcs.init_frame = &init_frame;
    funcs.init_slice = &init_slice;
    funcs.calc_lines = &calc_lines;

    return funcs;
}

#undef ARG
#define ARG(i)			(arguments[(i)])

$filter_begin
static float*
filter_$name (mathmap_invocation_t *invocation, userval_t *arguments, float x, float y, float t, pools_t *pools)
{
    color_t (*get_orig_val_pixel_func) (mathmap_invocation_t*, float, float, image_t*, int);
    int frame = 0;
    int __canvasPixelW = invocation->img_width;
    int __canvasPixelH = invocation->img_height;
    int __renderPixelW = invocation->render_width;
    int __renderPixelH = invocation->render_height;
    float R = invocation->image_R;
    float *return_tuple;

#if $g
    if (invocation->antialiasing)
	get_orig_val_pixel_func = get_orig_val_intersample_pixel;
    else
	get_orig_val_pixel_func = get_orig_val_pixel;
#else
    if (invocation->antialiasing)
	get_orig_val_pixel_func = get_orig_val_intersample_pixel_fast;
    else
	get_orig_val_pixel_func = get_orig_val_pixel_fast;
#endif

    $m

    return return_tuple;
}
$filter_end
