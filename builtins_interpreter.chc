%<newtmpnum=%locals(i,%<i=0>,%lambda(%<i=%[i+1]>%i))>\
%<curnumargs=0>\
%<builtins=%list()>\
\
%defspecial(builtin,name,funcname,args,code,
    %lappend(%&builtins,%hash(name,%eval(%name),funcname,%eval(%funcname),args,%eval(%args)))\
    %<curnumargs=%llength(%ssplit(%',',%eval(%args)))>\
    void gen_%eval(%funcname) %'(FILE*, int*, int*, int)';
    void builtin_%eval(%funcname) %'(postfix_arg *arg)'
    {
        %eval(%code)
        stackp -= %[curnumargs - 1];
    }%'\n'
)\
\
%defspecial(forarglength,argnum,name,code,
%locals(varname,
    %<varname=i_%newtmpnum()>\
    %envAdd(%envThis(),%eval(%name),%varname)\
    {
        int %varname;

        for %'('%varname = 0; %varname < stack[stackp - %[curnumargs - argnum]].length; ++%varname%')'
        {
            %eval(%code)
        }
    }
))\
\
%defspecial(fornum,name,begin,end,code,
%locals(varname,
    %<varname=i_%newtmpnum()>\
    %envAdd(%envThis(),%eval(%name),%varname)\
    {
        int %varname;

        for %'('%varname = %eval(%begin); %varname < %eval(%end); ++%varname%')'
        {
            %eval(%code)
        }
    }
))\
\
%define(result,index,
    stack[stackp - %curnumargs].data[%index]
)\
\
%define(reslength,
    stack[stackp - %curnumargs].length
)\
\
%define(arg,argnum,index,
    stack[stackp - %[curnumargs - argnum]].data[%index]
)\
\
%define(val,index,
    %index
)\
\
#include builtins.chc


void
init_builtins (void)
{
%foreach(b,%&builtins,
    register_overloaded_builtin%'('"%b{name}"%',' "%b{args}"%','
                                   builtin_%b{funcname}%','
                                   %if(%bound(USE_CGEN),gen_%b{funcname},0)%');\n'
)
}
