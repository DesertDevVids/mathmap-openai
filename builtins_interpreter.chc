#!
#! builtins_interpreter.chc
#!
#! mathmap
#!
#! Copyright (C) 1997-2000 Mark Probst
#!
#! This program is free software; you can redistribute it and/or
#! modify it under the terms of the GNU General Public License
#! as published by the Free Software Foundation; either version 2
#! of the License, or (at your option) any later version.
#!
#! This program is distributed in the hope that it will be useful,
#! but WITHOUT ANY WARRANTY; without even the implied warranty of
#! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#! GNU General Public License for more details.
#!
#! You should have received a copy of the GNU General Public License
#! along with this program; if not, write to the Free Software
#! Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#!

%<newtmpnum=%locals(i,%<i=0>,%lambda(%<i=%[i+1]>%i))>\
%<curnumargs=0>\
%<builtins=%list()>\
\
%defspecial(builtin,name,funcname,args,sidefx,code,
    %lappend(%&builtins,%hash(name,%eval(%name),funcname,%eval(%funcname),args,%eval(%args),sidefx,%eval(%sidefx)))\
    %<curnumargs=%[%llength(%ssplit(%'\\) \\(',%eval(%args))) - 1]>\
    void gen_%eval(%funcname) %'(FILE*, int*, int*, int)';
    void builtin_%eval(%funcname) %'(mathmap_invocation_t *invocation, postfix_arg *arg)'
    {
        %eval(%code)
        invocation->stackp -= %[curnumargs - 1];
    }%'\n'
)\
\
%defspecial(forarglength,argnum,name,code,
%locals(varname,
    %<varname=i_%newtmpnum()>\
    %envAdd(%envThis(),%eval(%name),%varname)\
    {
        int %varname;

        for %'('%varname = 0; %varname < invocation->stack[invocation->stackp - %curnumargs + %eval(%argnum)].length; ++%varname%')'
        {
            %eval(%code)
        }
    }
))\
\
%defspecial(fornum,name,begin,end,code,
%locals(varname,
    %<varname=i_%newtmpnum()>\
    %envAdd(%envThis(),%eval(%name),%varname)\
    {
        int %varname;

        for %'('%varname = %eval(%begin); %varname < %eval(%end); ++%varname%')'
        {
            %eval(%code)
        }
    }
))\
\
%define(result,index,
    invocation->stack[invocation->stackp - %curnumargs].data[%index]
)\
\
%define(reslength,
    invocation->stack[invocation->stackp - %curnumargs].length
)\
\
%define(arg,argnum,index,
    invocation->stack[invocation->stackp - %[curnumargs - argnum]].data[%index]
)\
\
%define(val,index,
    %index
)\
\
%<dq=">\
%<prc=%'%'>\
%<str=>\
\
%'#include <stdio.h>'
%'#include <stdlib.h>'
%'#include <math.h>'

%'#include "postfix.h"'
%'#include "overload.h"'
%'#include "noise.h"'
%'#include "tuples.h"'
%'#include "mathmap.h"'

void solve_linear_equations (int dim, float *a, float *b);
void get_orig_val_pixel (mathmap_invocation_t *invocation, float x, float y, unsigned char *pixel, int drawable_index, int frame);
void get_orig_val_intersample_pixel (mathmap_invocation_t *invocation, float x, float y, unsigned char *pixel, int drawable_index, int frame);

void
get_orig_val_pixel_func (mathmap_invocation_t *invocation, float x, float y, unsigned char *pixel, int drawable_index, int frame)
{
    if (invocation->antialiasing)
        get_orig_val_intersample_pixel(invocation, x, y, pixel, drawable_index, frame);
    else
        get_orig_val_pixel(invocation, x, y, pixel, drawable_index, frame);
}

#include builtins.chc

void
init_builtins (void)
{
%foreach(b,%&builtins,
    register_overloaded_builtin%'('"%b{name}"%',' "%b{args}"%','
                                   builtin_%b{funcname}%','
                                   0%');\n'
)
}
