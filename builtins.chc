#!
#! builtins.chc
#!
#! mathmap
#!
#! Copyright (C) 1997-2000 Mark Probst
#!
#! This program is free software; you can redistribute it and/or
#! modify it under the terms of the GNU General Public License
#! as published by the Free Software Foundation; either version 2
#! of the License, or (at your option) any later version.
#!
#! This program is distributed in the hope that it will be useful,
#! but WITHOUT ANY WARRANTY; without even the implied warranty of
#! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#! GNU General Public License for more details.
#!
#! You should have received a copy of the GNU General Public License
#! along with this program; if not, write to the Free Software
#! Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#!

#include list.chh

#ifdef HAVE_COMPLEX
%'#include <complex.h>'
#endif
%'#include "spec_func.h"'

#! ----- debugging

%builtin(print,print,%'((nil 1) (_ _))',1,
    printf%'('%<dq>[%<dq>%')';
    %forarglength(0,i,
        printf%'('%<dq>%<prc>f %<dq>%',' %arg(0,%<i>)%')';
    )
    printf%'('%<dq>]\n%<dq>%')';
)\

#! ----- arithmetic

%builtin(__add,add_ri,%'((ri 2) (ri 2) (ri 2))',0,
    %result(0) = %arg(0,0) + %arg(1,0);
    %result(1) = %arg(0,1) + %arg(1,1);
)\

%builtin(__add,add_ri_1,%'((ri 2) (ri 2) (T 1))',0,
    %result(0) = %arg(0,0) + %arg(1,0);
    %result(1) = %arg(0,1);
)\

%builtin(__add,add_1_ri,%'((ri 2) (T 1) (ri 2))',0,
    %result(0) = %arg(0,0) + %arg(1,0);
    %result(1) =             %arg(1,1);
)\

%builtin(__add,add_1,%'((T 1) (T 1) (T 1))',0,
    %result(0) = %arg(0,0) + %arg(1,0);
)\

%builtin(__add,add_s,%'((T L) (T L) (_ 1))',0,
    %forarglength(0,i,
        %result(%<i>) = %arg(0,%<i>) + %arg(1,0);
    )
)\

%builtin(__add,add_n,%'((T L) (T L) (T L))',0,
    %forarglength(0,i,
        %result(%<i>) = %arg(0,%<i>) + %arg(1,%<i>);
    )
)\

%builtin(__sub,sub_ri,%'((ri 2) (ri 2) (ri 2))',0,
    %result(0) = %arg(0,0) - %arg(1,0);
    %result(1) = %arg(0,1) - %arg(1,1);
)\

%builtin(__sub,sub_ri_1,%'((ri 2) (ri 2) (T 1))',0,
    %result(0) = %arg(0,0) - %arg(1,0);
    %result(1) = %arg(0,1);
)\

%builtin(__sub,sub_1_ri,%'((ri 2) (T 1) (ri 2))',0,
    %result(0) = %arg(0,0) - %arg(1,0);
    %result(1) =           - %arg(1,1);
)\

%builtin(__sub,sub_1,%'((T 1) (T 1) (T 1))',0,
    %result(0) = %arg(0,0) - %arg(1,0);
)\

%builtin(__sub,sub_s,%'((T L) (T L) (_ 1))',0,
    %forarglength(0,i,
        %result(%<i>) = %arg(0,%<i>) - %arg(1,0);
    )
)\

%builtin(__sub,sub_n,%'((T L) (T L) (T L))',0,
    %forarglength(0,i,
        %result(%<i>) = %arg(0,%<i>) - %arg(1,%<i>);
    )
)\

%builtin(__neg,neg,%'((T L) (T L))',0,
    %forarglength(0,i,
        %result(%<i>) = -%arg(0,%<i>);
    )
)\

%builtin(__mul,mul_ri,%'((ri 2) (ri 2) (ri 2))',0,
    float r1 = %arg(0,0);
    float r2 = %arg(1,0);
    float c1 = %arg(0,1);
    float c2 = %arg(1,1);

    %result(0) = r1 * r2 - c1 * c2;
    %result(1) = r1 * c2 + r2 * c1;
)\

%builtin(__mul,mul_1_ri,%'((ri 2) (T 1) (ri 2))',0,
    %result(0) = %arg(0,0) * %arg(1,0);
    %result(1) = %arg(0,0) * %arg(1,1);
)\

%define(matmult,n,
    %for(i,0,%[n-1],
        %for(j,0,%[n-1],
            float a%i%j = %<lst=%list()>%for(k,0,%[n-1],%<lst[%k]=%arg(0,%[i*n+k]) * %arg(1,%[k*n+j])>)%listJoin(+,%lst);%'\n'
        )
    )\

    %for(i,0,%[n*n-1],
        %result(%i) = a%[i/n]%[i%%n];%'\n'
    )
)\

%builtin(__mul,mul_m2x2,%'((m2x2 4) (m2x2 4) (m2x2 4))',0,
    %matmult(2)
)\

%builtin(__mul,mul_m3x3,%'((m3x3 9) (m3x3 9) (m3x3 9))',0,
    %matmult(3)
)\

%define(vecmatmul,n,
    %for(i,0,%[n-1],
        float a%i = %<lst=%list()>%for(j,0,%[n-1],%<lst[%j]=%arg(0,%j) * %arg(1,%[j*n+i])>)%listJoin(+,%lst);%'\n'
    )\

    %for(i,0,%[n-1],
        %result(%i) = a%i;%'\n'
    )
)\

%builtin(__mul,mul_v2m2x2,%'((T 2) (T 2) (m2x2 4))',0,
    %vecmatmul(2)
)\

%builtin(__mul,mul_v3m3x3,%'((T 3) (T 3) (m3x3 9))',0,
    %vecmatmul(3)
)\

%define(matvecmul,n,
    %for(i,0,%[n-1],
        float a%i = %<lst=%list()>%for(j,0,%[n-1],%<lst[%j]=%arg(0,%[i*n+j]) * %arg(1,%j)>)%listJoin(+,%lst);%'\n'
    )\

    %for(i,0,%[n-1],
        %result(%i) = a%i;%'\n'
    )
)\

%builtin(__mul,mul_m2x2v2,%'((T 2) (m2x2 4) (T 2))',0,
    %matvecmul(2)
)\

%builtin(__mul,mul_m3x3v3,%'((T 3) (m3x3 9) (T 3))',0,
    %matvecmul(3)
)\

%builtin(__mul,mul_1,%'((T 1) (T 1) (T 1))',0,
    %result(0) = %arg(0,0) * %arg(1,0);
)\

%builtin(__mul,mul_s,%'((T L) (T L) (_ 1))',0,
    %forarglength(0,i,
        %result(%<i>) = %arg(0,%<i>) * %arg(1,0);
    )
)\

%builtin(__mul,mul_n,%'((T L) (T L) (T L))',0,
    %forarglength(0,i,
        %result(%<i>) = %arg(0,%<i>) * %arg(1,%<i>);
    )
)\

#ifdef HAVE_COMPLEX
#! Use library version of complex division for better numerics / Hans L
%builtin(__div,div_ri,%'((ri 2) (ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = %'(' %arg(0,0) + %arg(0,1) * I %')' / %'(' %arg(1,0) + %arg(1,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#else
%builtin(__div,div_ri,%'((ri 2) (ri 2) (ri 2))',0,
    float r1 = %arg(0,0);
    float r2 = %arg(1,0);
    float c1 = %arg(0,1);
    float c2 = %arg(1,1);

    if %'('r2 == 0 && c2 == 0%')'
    {
        %result(0) = 0;
        %result(1) = 0;
    }
    else
    {
        %result(0) = %'(r1 * r2 + c1 * c2) / (r2 * r2 + c2 * c2)';
        %result(1) = %'(-r1 * c2 + r2 * c1) / (r2 * r2 + c2 * c2)';
    }
)\
#endif

%builtin(__div,div_1_ri,%'((ri 2) (T 1) (ri 2))',0,
    double %'x,y,tmp';

    x = %arg(1,0);
    y = %arg(1,1);
    tmp = x * x + y * y;

    if %'(tmp == 0)'
    {
        %result(0) = 0.0;
        %result(1) = 0.0;
    }
    else
    {
        %result(0) =   %arg(0,0) * x / tmp;
        %result(1) = - %arg(0,0) * y / tmp;
    }
)\

%builtin(__div,div_v2m2x2,%'((nil 2) (_ 2) (m2x2 4))',0,
    float a[4] = { %arg(1,0)%',' %arg(1,1)%',' %arg(1,2)%',' %arg(1,3) };
    float b[2] = { %arg(0,0)%',' %arg(0,1) };

    solve_linear_equations%'(2, a, b)';

    %result(0) = b[0];
    %result(1) = b[1];
)\

%builtin(__div,div_v3m3x3,%'((nil 3) (_ 3) (m3x3 9))',0,
    float a[9] = { %arg(1,0)%',' %arg(1,1)%',' %arg(1,2)%',' %arg(1,3)%',' %arg(1,4)%',' %arg(1,5)%',' %arg(1,6)%',' %arg(1,7)%',' %arg(1,8) };
    float b[3] = { %arg(0,0)%',' %arg(0,1)%',' %arg(0,2) };

    solve_linear_equations%'(3, a, b)';

    %result(0) = b[0];
    %result(1) = b[1];
    %result(2) = b[2];
)\

%builtin(__div,div_1,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(1,0) == 0%')'
        %result(0) = 0.0;
    else
        %result(0) = %arg(0,0) / %arg(1,0);
)\

%builtin(__div,div_s,%'((T L) (T L) (_ 1))',0,
    if %'('%arg(1,0) == 0%')'
        %forarglength(0,i,
            %result(%<i>) = 0.0;
        )
    else
        %forarglength(0,i,
            %result(%<i>) = %arg(0,%<i>) / %arg(1,0);
        )
)\

%builtin(__div,div_n,%'((T L) (T L) (T L))',0,
    %forarglength(0,i,
        if %'('%arg(1,%<i>) == 0%')'
            %result(%<i>) = 0.0;
        else
            %result(%<i>) = %arg(0,%<i>) / %arg(1,%<i>);
    )
)\

%builtin(__mod,mod_1,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(1,0) == 0%')'
        %result(0) = 0.0;
    else
        %result(0) = fmod%'('%arg(0,0)%',' %arg(1,0)%')';
)\

%builtin(__mod,mod_s,%'((T L) (T L) (_ 1))',0,
    if %'('%arg(1,0) == 0%')'
        %forarglength(0,i,
            %result(%<i>) = 0.0;
        )
    else
        %forarglength(0,i,
            %result(%<i>) = fmod%'('%arg(0,%<i>)%',' %arg(1,0)%')';
        )
)\

%builtin(__mod,mod_n,%'((T L) (T L) (T L))',0,
    %forarglength(0,i,
        if %'('%arg(1,%<i>) == 0%')'
            %result(%<i>) = 0.0;
        else
            %result(%<i>) = fmod%'('%arg(0,%<i>)%',' %arg(1,%<i>)%')';
    )
)\

%builtin(pmod,pmod,%'((T 1) (T 1) (T 1))',0,
    float mod = fmod%'('%arg(0,0)%',' %arg(1,0)%')';

    if %'('%arg(0,0) < 0%')'
        mod += %arg(1,0);

    %result(0) = mod;
)\

#ifdef HAVE_COMPLEX
%builtin(sqrt,sqrt_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = cpow%'(' %arg(0,0) + %arg(0,1) * I %',' 0.5 %')';
#!    csqrt seems to give strange results on the negative imaginary axis!? / Hans L
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(sqrt,sqrt_1,%'((T 1) (T 1))',0,
    %result(0) = sqrt%'('%arg(0,0)%')';
)\

%builtin(sum,sum,%'((T 1) (T L))',0,
    float sum = 0.0;

    %forarglength(0,i,
        sum += %arg(0,%<i>);
    )
    %result(0) = sum;
)\

#! ----- vector functions

%builtin(dotp,dotp,%'((nil 1) (T L) (T L))',0,
    float sum = 0.0;

    %forarglength(0,i,
        sum += %arg(0,%<i>) * %arg(1,%<i>);
    )
    %result(0) = sum;
    %reslength() = 1;
)\

%builtin(crossp,crossp,%'((T 3) (T 3) (T 3))',0,
    %result(0) = %arg(0,1) * %arg(1,2) - %arg(0,2) * %arg(1,1);
    %result(1) = %arg(0,2) * %arg(1,0) - %arg(0,0) * %arg(1,2);
    %result(2) = %arg(0,0) * %arg(1,1) - %arg(0,1) * %arg(1,0);
)\

%builtin(det,det_m2x2,%'((nil 1) (m2x2 4))',0,
    %result(0) = %arg(0,0) * %arg(0,3) - %arg(0,1) * %arg(0,2);
)\

%builtin(det,det_m3x3,%'((nil 1) (m3x3 9))',0,
    %result(0) = %arg(0,0) * %arg(0,4) * %arg(0,8)
                 + %arg(0,1) * %arg(0,5) * %arg(0,6)
                 + %arg(0,2) * %arg(0,3) + %arg(0,7)
                 - %arg(0,2) * %arg(0,4) + %arg(0,6)
                 - %arg(0,0) * %arg(0,5) + %arg(0,7)
                 - %arg(0,1) * %arg(0,3) + %arg(0,8);
)\

%builtin(normalize,normalize,%'((T L) (T L))',0,
    float l = 0.0;

    %forarglength(0,i,
        l += %arg(0,%<i>) * %arg(0,%<i>);
    )
    l = %'sqrt(l)';
    %forarglength(0,i,
        if %'('l == 0%')'
            %result(%<i>) = 0.0;
        else
            %result(%<i>) = %arg(0,%<i>) / l;
    )
)\

#! Use library function hypot instead of sqrt for better numerics / Hans L
%builtin(abs,abs_ri,%'((nil 1) (ri 2))',0,
    %result(0) = hypot%'(' %arg(0,0) %',' %arg(0,1) %')';
    %reslength() = 1;
)\

%builtin(abs,abs_1,%'((T 1) (T 1))',0,
    %result(0) = fabs%'('%arg(0,0)%')';
)\

%builtin(abs,abs_n,%'((T L) (T L))',0,
    %forarglength(0,i,
        %result(%<i>) = fabs%'('%arg(0,%<i>)%')';
    )
)\

#! ----- trigonometry

#ifdef HAVE_COMPLEX
%builtin(sin,sin_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = csin%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(sin,sin,%'((T 1) (T 1))',0,
    %result(0) = sin%'('%arg(0,0) * M_PI / 180.0%')';
)\

#ifdef HAVE_COMPLEX
%builtin(cos,cos_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = ccos%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(cos,cos,%'((T 1) (T 1))',0,
    %result(0) = cos%'('%arg(0,0) * M_PI / 180.0%')';
)\

#ifdef HAVE_COMPLEX
%builtin(tan,tan_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = ctan%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(tan,tan,%'((T 1) (T 1))',0,
    %result(0) = tan%'('%arg(0,0) * M_PI / 180.0%')';
)\

#ifdef HAVE_COMPLEX
%builtin(asin,asin_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = casin%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(asin,asin,%'((T 1) (T 1))',0,
    if %'('%arg(0,0) < -1.0 || %arg(0,0) > 1.0%')'
    {
        %result(0) = 0.0;
    }
    else
    {
        %result(0) = asin%'('%arg(0,0)%')' * 180.0 / M_PI;
    }
)\

#ifdef HAVE_COMPLEX
%builtin(acos,acos_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = cacos%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(acos,acos,%'((T 1) (T 1))',0,
    if %'('%arg(0,0) < -1.0 || %arg(0,0) > 1.0%')'
    {
        %result(0) = 0.0;
    }
    else
    {
        %result(0) = acos%'('%arg(0,0)%')' * 180.0 / M_PI;
    }
)\

#ifdef HAVE_COMPLEX
%builtin(atan,atan_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = catan%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(atan,atan,%'((T 1) (T 1))',0,
    %result(0) = atan%'('%arg(0,0)%')' * 180.0 / M_PI;
)\

%builtin(atan,atan2,%'((T 1) (T 1) (T 1))',0,
    %result(0) = atan2%'('%arg(0,0)%','%arg(1,0)%')' * 180.0 / M_PI;
)\

#! ----- exp and friends

#ifdef HAVE_COMPLEX
%builtin(__pow,pow_ri_1,%'((ri 2) (ri 2) (T 1))',0,
    double __complex__ tmp;
    tmp = cpow%'(' %arg(0,0) + %arg(0,1) * I %',' %arg(1,0) %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\

%builtin(__pow,pow_ri,%'((ri 2) (ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = cpow%'(' %arg(0,0) + %arg(0,1) * I %',' %arg(1,0) + %arg(1,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\

%builtin(__pow,pow_1_ri,%'((ri 2) (T 1) (ri 2))',0,
    double __complex__ tmp;
    tmp = cpow%'(' %arg(0,0) %',' %arg(1,0) + %arg(1,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(__pow,pow_1,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(1,0) <= 0 && %arg(0,0) == 0%')'
        %result(0) = 0.0;
    else
        %result(0) = pow%'('%arg(0,0)%',' %arg(1,0)%')';
)\

%builtin(__pow,pow_s,%'((T L) (T L) (_ 1))',0,
    %forarglength(0,i,
        if %'('%arg(1,0) <= 0 && %arg(0,%<i>) == 0%')'
            %result(%<i>) = 0.0;
        else
            %result(%<i>) = pow%'('%arg(0,%<i>)%',' %arg(1,0)%')';
    )
)\

#ifdef HAVE_COMPLEX
%builtin(exp,exp_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = cexp%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(exp,exp_1,%'((T 1) (T 1))',0,
    %result(0) = exp%'('%arg(0,0)%')';
)\

#ifdef HAVE_COMPLEX
#! -PI < Im log(z) <= PI
%builtin(log,log_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = clog%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(log,log_1,%'((T 1) (T 1))',0,
    if %'('%arg(0,0) <= 0.0 %')'
    {
        %result(0) = 0.0;
    }
    else
    {
        %result(0) = log%'('%arg(0,0)%')';
    }
)\

#! ----- complex

#ifdef HAVE_COMPLEX
%builtin(arg,arg_ri,%'((nil 1) (ri 2))',0,
    %result(0) = carg%'(' %arg(0,0) + %arg(0,1) * I %')';
)\
#endif

%builtin(conj,conj_ri,%'((ri 2) (ri 2))',0,
    %result(0) = %arg(0,0);
    %result(1) = -%arg(0,1);
)\

#! ----- hyperbolic

#ifdef HAVE_COMPLEX
%builtin(sinh,sinh_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = csinh%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(sinh,sinh_1,%'((T 1) (T 1))',0,
    %result(0) = sinh%'('%arg(0,0)%')';
)\

#ifdef HAVE_COMPLEX
%builtin(cosh,cosh_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = ccosh%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(cosh,cosh_1,%'((T 1) (T 1))',0,
    %result(0) = cosh%'('%arg(0,0)%')';
)\

#ifdef HAVE_COMPLEX
%builtin(tanh,tanh_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = ctanh%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(tanh,tanh_1,%'((T 1) (T 1))',0,
    %result(0) = tanh%'('%arg(0,0)%')';
)\

#ifdef HAVE_COMPLEX
%builtin(asinh,asinh_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = casinh%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(asinh,asinh_1,%'((T 1) (T 1))',0,
    %result(0) = asinh%'('%arg(0,0)%')';
)\

#ifdef HAVE_COMPLEX
%builtin(acosh,acosh_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = cacosh%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(acosh,acosh_1,%'((T 1) (T 1))',0,
    %result(0) = acosh%'('%arg(0,0)%')';
)\

#ifdef HAVE_COMPLEX
%builtin(atanh,atanh_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = catanh%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(atanh,atanh_1,%'((T 1) (T 1))',0,
    %result(0) = atanh%'('%arg(0,0)%')';
)\

#ifdef HAVE_COMPLEX
%builtin(gamma,gamma_ri,%'((ri 2) (ri 2))',0,
    double __complex__ tmp;
    tmp = cgamma%'(' %arg(0,0) + %arg(0,1) * I %')';
    %result(0) = %'creal(tmp)';
    %result(1) = %'cimag(tmp)';
)\
#endif

%builtin(gamma,gamma_1,%'((T 1) (T 1))',0,
    %result(0) = gamma%'('%arg(0,0)%')';
)\

#! ----- floor and friends

%builtin(floor,floor,%'((T 1) (T 1))',0,
    %result(0) = floor%'('%arg(0,0)%')';
)\

%builtin(sign,sign_1,%'((T 1) (T 1))',0,
    if %'('%arg(0,0) < 0%')'
        %result(0) = -1.0;
    else if %'('%arg(0,0) > 0%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(sign,sign_n,%'((T L) (T L))',0,
    %forarglength(0,i,
        if %'('%arg(0,%<i>) < 0%')'
            %result(%<i>) = -1.0;
        else if %'('%arg(0,%<i>) > 0%')'
            %result(%<i>) = 1.0;
        else
            %result(%<i>) = 0.0;
    )
)\

%builtin(min,min_1,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) < %arg(1,0)%')'
        %result(0) = %arg(0,0);
    else
        %result(0) = %arg(1,0);
)\

%builtin(min,min_n,%'((T L) (T L) (T L))',0,
    %forarglength(0,i,
        if %'('%arg(0,%<i>) < %arg(1,%<i>)%')'
            %result(%<i>) = %arg(0,%<i>);
        else
            %result(%<i>) = %arg(1,%<i>);
    )
)\

%builtin(max,max_1,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) > %arg(1,0)%')'
        %result(0) = %arg(0,0);
    else
        %result(0) = %arg(1,0);
)\

%builtin(max,max_n,%'((T L) (T L) (T L))',0,
    %forarglength(0,i,
        if %'('%arg(0,%<i>) > %arg(1,%<i>)%')'
            %result(%<i>) = %arg(0,%<i>);
        else
            %result(%<i>) = %arg(1,%<i>);
    )
)\

%builtin(clamp,clamp,%'((T L) (T L) (T L) (T L))',0,
    %forarglength(0,i,
        if %'('%arg(0,%<i>) < %arg(1,%<i>)%')'
            %result(%<i>) = %arg(1,%<i>);
        else if %'('%arg(0,%<i>) > %arg(2,%<i>)%')'
            %result(%<i>) = %arg(2,%<i>);
        else
            %result(%<i>) = %arg(0,%<i>);
    )
)\

%builtin(lerp,lerp_1,%'((T L) (_ 1) (T L) (T L))',0,
    %forarglength(1,i,
        %result(%<i>) = %'('1 - %arg(0,0)%')' * %arg(1,%<i>) + %arg(0,0) * %arg(2,%<i>);
    )
)\

%builtin(lerp,lerp_n,%'((T L) (_ L) (T L) (T L))',0,
    %forarglength(0,i,
        %result(%<i>) = %'('1 - %arg(0,%<i>)%')' * %arg(1,%<i>) + %arg(0,%<i>) * %arg(2,%<i>);
    )
)\

%builtin(scale,scale,%'((T L) (T L) (T L) (T L) (T L) (T L))',0,
    %forarglength(0,i,
        if %'('%arg(2,%<i>) - %arg(1,%<i>) == 0.0%')'
            %result(%<i>) = %arg(3,%<i>);
        else
            %result(%<i>) = %'('%arg(0,%<i>) - %arg(1,%<i>)%')' / %'('%arg(2,%<i>) - %arg(1,%<i>)%')' * %'('%arg(4,%<i>) - %arg(3,%<i>)%')' + %arg(3,%<i>);
    )
)\

#! ----- logic

%builtin(__not,not,%'((T 1) (T 1))',0,
    if %'('%arg(0,0) != 0%')'
        %result(0) = 0.0;
    else
        %result(0) = 1.0;
)\

%builtin(__or,or,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) || %arg(1,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(__and,and,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) && %arg(1,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(__xor,xor,%'((T 1) (T 1) (T 1))',0,
    if %'(('%arg(0,0) && !%arg(1,0)%') || ('!%arg(0,0) && %arg(1,0)%'))'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

#! ----- comparison

%builtin(__equal,equal,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) == %arg(1,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(__less,less,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) < %arg(1,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(__greater,greater,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) > %arg(1,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(__lessequal,lessequal,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) <= %arg(1,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(__greaterequal,greaterequal,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) >= %arg(1,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(__notequal,notequal,%'((T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) != %arg(1,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

%builtin(inintv,inintv,%'((T 1) (T 1) (T 1) (T 1))',0,
    if %'('%arg(0,0) >= %arg(1,0) && %arg(0,0) <= %arg(2,0)%')'
        %result(0) = 1.0;
    else
        %result(0) = 0.0;
)\

#! ----- origval

%builtin(origVal,origValXY,%'((rgba 4) (xy 2) (image 1))',0,
    unsigned char pixel[4];

    getOrigValPixel%'('%arg(0,0)%','%arg(0,1)%','pixel%','%arg(1,0)%')';

    %fornum(i,0,4,
        %result(%<i>) = pixel[%val(%<i>)] / 255.0;
    )
    %reslength() = 4;
)\

%builtin(origValIntersample,origValXYIntersample,%'((rgba 4) (xy 2) (image 1))',0,
    unsigned char pixel[4];

    getOrigValIntersamplePixel%'('%arg(0,0)%','%arg(0,1)%','pixel%','%arg(1,0)%')';

    %fornum(i,0,4,
        %result(%<i>) = pixel[%val(%<i>)] / 255.0;
    )
    %reslength() = 4;
)\

#! ----- colors

%builtin(gray,gray,%'((nil 1) (rgba 4))',0,
    %result(0) = 0.299 * %arg(0,0) + 0.587 * %arg(0,1) + 0.114 * %arg(0,2);
    %reslength() = 1;
)\

%builtin(gradient,gradient,%'((rgba 4) (_ 1))',0,
    int index = %arg(0,0) * %'(num_gradient_samples - 1)';

    if %'(index < 0)'
        index = 0;
    else if %'(index >= num_gradient_samples)'
        index = num_gradient_samples - 1;

    %fornum(i,0,4,
        %result(%<i>) = gradient_samples[index].data[%val(%<i>)];
    )
    %reslength() = 4;
)\

%builtin(toHSVA,toHSVA,%'((hsva 4) (rgba 4))',0,
    float rgb[3] = { %arg(0,0)%',' %arg(0,1)%',' %arg(0,2) };
    float hsv[3];

    %'convert_rgb_to_hsv(rgb, hsv)';
    %result(0) = hsv[0];
    %result(1) = hsv[1];
    %result(2) = hsv[2];
    %result(3) = %arg(0,3);
)\

%builtin(toRGBA,toRGBA,%'((rgba 4) (hsva 4))',0,
    float hsv[3] = { %arg(0,0)%',' %arg(0,1)%',' %arg(0,2) };
    float rgb[3];

    %'convert_hsv_to_rgb(hsv, rgb)';
    %result(0) = rgb[0];
    %result(1) = rgb[1];
    %result(2) = rgb[2];
    %result(3) = %arg(0,3);
)\

#! ----- coordinates

%builtin(toXY,toXY,%'((xy 2) (ra 2))',0,
    double x%',' y;

    x = cos%'('%arg(0,1) * M_PI / 180%')' * %arg(0,0);
    y = sin%'('%arg(0,1) * M_PI / 180%')' * %arg(0,0);

    %result(0) = x;
    %result(1) = y;
)\

#! Use library function hypot instead of sqrt for better numerics / Hans L
%builtin(toRA,toRA,%'((ra 2) (xy 2))',0,
    double %'x, y, r, a';

    x = %arg(0,0);
    y = %arg(0,1);

    r = hypot%'(x, y)';
    if %'(r == 0)'
        a = 0.0;
    else
        a = %'acos(x / r) * 180 / M_PI';

    if %'(y < 0)'
        a = 360 - a;

    %result(0) = r;
    %result(1) = a;
)\

#! ----- noise

%builtin(rand,rand,%'((T 1) (T 1) (T 1))',1,
    %result(0) = %'(random() / (double)0x7fffffff)' * %'('%arg(1,0) - %arg(0,0)%')' + %arg(0,0);
)\

%builtin(noise,noise,%'((nil 1) (_ 3))',0,
    %result(0) = noise%'('%arg(0,0)%',' %arg(0,1)%',' %arg(0,2)%')';
)\
